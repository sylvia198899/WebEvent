//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:2.0.50727.1433
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="GASHv35LoginWSSoap", Namespace="http://gamania.com/webservices/")]
public partial class GASHv35LoginWS : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback CreateOTPOperationCompleted;
    
    private System.Threading.SendOrPostCallback CreateOTPForMergeListOperationCompleted;
    
    private System.Threading.SendOrPostCallback CreateSecretCodeOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetUserDataOperationCompleted;
    
    /// <remarks/>
    public GASHv35LoginWS() {
      //  this.Url = "http://alpha-tw.login.beanfun.com/ws/Gashv35LoginWs.asmx";
         string _stralphaFlag = System.Configuration.ConfigurationSettings.AppSettings["IsaphaFlag"];   
		if (_stralphaFlag==null) _stralphaFlag=string.Empty;
        string _strUrl = "https://tw.login.beanfun.com/ws/gashv35loginws.asmx";
        string _strWSUrl = System.Configuration.ConfigurationSettings.AppSettings["alphaBeanFunWsUrl"] ;
		if (_strWSUrl==null) _strWSUrl=_strUrl;

        if (_stralphaFlag == "1")        
            _strUrl = System.Configuration.ConfigurationSettings.AppSettings["alphaBeanFunWsUrl"];        
        else
            _strUrl = System.Configuration.ConfigurationSettings.AppSettings["BeanFunWsUrl"];

        this.Url = _strUrl;
    }
    
    /// <remarks/>
    public event CreateOTPCompletedEventHandler CreateOTPCompleted;
    
    /// <remarks/>
    public event CreateOTPForMergeListCompletedEventHandler CreateOTPForMergeListCompleted;
    
    /// <remarks/>
    public event CreateSecretCodeCompletedEventHandler CreateSecretCodeCompleted;
    
    /// <remarks/>
    public event GetUserDataCompletedEventHandler GetUserDataCompleted;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gamania.com/webservices/CreateOTP", RequestNamespace="http://gamania.com/webservices/", ResponseNamespace="http://gamania.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public WSResult CreateOTP(string clientIp, string userAgent, string returnUrl, int LoginType, string serviceCode, string serviceRegion) {
        object[] results = this.Invoke("CreateOTP", new object[] {
                    clientIp,
                    userAgent,
                    returnUrl,
                    LoginType,
                    serviceCode,
                    serviceRegion});
        return ((WSResult)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCreateOTP(string clientIp, string userAgent, string returnUrl, int LoginType, string serviceCode, string serviceRegion, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateOTP", new object[] {
                    clientIp,
                    userAgent,
                    returnUrl,
                    LoginType,
                    serviceCode,
                    serviceRegion}, callback, asyncState);
    }
    
    /// <remarks/>
    public WSResult EndCreateOTP(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((WSResult)(results[0]));
    }
    
    /// <remarks/>
    public void CreateOTPAsync(string clientIp, string userAgent, string returnUrl, int LoginType, string serviceCode, string serviceRegion) {
        this.CreateOTPAsync(clientIp, userAgent, returnUrl, LoginType, serviceCode, serviceRegion, null);
    }
    
    /// <remarks/>
    public void CreateOTPAsync(string clientIp, string userAgent, string returnUrl, int LoginType, string serviceCode, string serviceRegion, object userState) {
        if ((this.CreateOTPOperationCompleted == null)) {
            this.CreateOTPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateOTPOperationCompleted);
        }
        this.InvokeAsync("CreateOTP", new object[] {
                    clientIp,
                    userAgent,
                    returnUrl,
                    LoginType,
                    serviceCode,
                    serviceRegion}, this.CreateOTPOperationCompleted, userState);
    }
    
    private void OnCreateOTPOperationCompleted(object arg) {
        if ((this.CreateOTPCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CreateOTPCompleted(this, new CreateOTPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gamania.com/webservices/CreateOTPForMergeList", RequestNamespace="http://gamania.com/webservices/", ResponseNamespace="http://gamania.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public WSResult CreateOTPForMergeList(string clientIp, string userAgent, string returnUrl, int LoginType, string serviceCode, string serviceRegion) {
        object[] results = this.Invoke("CreateOTPForMergeList", new object[] {
                    clientIp,
                    userAgent,
                    returnUrl,
                    LoginType,
                    serviceCode,
                    serviceRegion});
        return ((WSResult)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCreateOTPForMergeList(string clientIp, string userAgent, string returnUrl, int LoginType, string serviceCode, string serviceRegion, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateOTPForMergeList", new object[] {
                    clientIp,
                    userAgent,
                    returnUrl,
                    LoginType,
                    serviceCode,
                    serviceRegion}, callback, asyncState);
    }
    
    /// <remarks/>
    public WSResult EndCreateOTPForMergeList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((WSResult)(results[0]));
    }
    
    /// <remarks/>
    public void CreateOTPForMergeListAsync(string clientIp, string userAgent, string returnUrl, int LoginType, string serviceCode, string serviceRegion) {
        this.CreateOTPForMergeListAsync(clientIp, userAgent, returnUrl, LoginType, serviceCode, serviceRegion, null);
    }
    
    /// <remarks/>
    public void CreateOTPForMergeListAsync(string clientIp, string userAgent, string returnUrl, int LoginType, string serviceCode, string serviceRegion, object userState) {
        if ((this.CreateOTPForMergeListOperationCompleted == null)) {
            this.CreateOTPForMergeListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateOTPForMergeListOperationCompleted);
        }
        this.InvokeAsync("CreateOTPForMergeList", new object[] {
                    clientIp,
                    userAgent,
                    returnUrl,
                    LoginType,
                    serviceCode,
                    serviceRegion}, this.CreateOTPForMergeListOperationCompleted, userState);
    }
    
    private void OnCreateOTPForMergeListOperationCompleted(object arg) {
        if ((this.CreateOTPForMergeListCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CreateOTPForMergeListCompleted(this, new CreateOTPForMergeListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gamania.com/webservices/CreateSecretCode", RequestNamespace="http://gamania.com/webservices/", ResponseNamespace="http://gamania.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public WSResult CreateSecretCode(string OTP2, string clientIp, string userAgent, string gashVersion) {
        object[] results = this.Invoke("CreateSecretCode", new object[] {
                    OTP2,
                    clientIp,
                    userAgent,
                    gashVersion});
        return ((WSResult)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCreateSecretCode(string OTP2, string clientIp, string userAgent, string gashVersion, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateSecretCode", new object[] {
                    OTP2,
                    clientIp,
                    userAgent,
                    gashVersion}, callback, asyncState);
    }
    
    /// <remarks/>
    public WSResult EndCreateSecretCode(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((WSResult)(results[0]));
    }
    
    /// <remarks/>
    public void CreateSecretCodeAsync(string OTP2, string clientIp, string userAgent, string gashVersion) {
        this.CreateSecretCodeAsync(OTP2, clientIp, userAgent, gashVersion, null);
    }
    
    /// <remarks/>
    public void CreateSecretCodeAsync(string OTP2, string clientIp, string userAgent, string gashVersion, object userState) {
        if ((this.CreateSecretCodeOperationCompleted == null)) {
            this.CreateSecretCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateSecretCodeOperationCompleted);
        }
        this.InvokeAsync("CreateSecretCode", new object[] {
                    OTP2,
                    clientIp,
                    userAgent,
                    gashVersion}, this.CreateSecretCodeOperationCompleted, userState);
    }
    
    private void OnCreateSecretCodeOperationCompleted(object arg) {
        if ((this.CreateSecretCodeCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CreateSecretCodeCompleted(this, new CreateSecretCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gamania.com/webservices/GetUserData", RequestNamespace="http://gamania.com/webservices/", ResponseNamespace="http://gamania.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public WSResult_UserData GetUserData(string OTP2, string secretCode) {
        object[] results = this.Invoke("GetUserData", new object[] {
                    OTP2,
                    secretCode});
        return ((WSResult_UserData)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetUserData(string OTP2, string secretCode, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUserData", new object[] {
                    OTP2,
                    secretCode}, callback, asyncState);
    }
    
    /// <remarks/>
    public WSResult_UserData EndGetUserData(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((WSResult_UserData)(results[0]));
    }
    
    /// <remarks/>
    public void GetUserDataAsync(string OTP2, string secretCode) {
        this.GetUserDataAsync(OTP2, secretCode, null);
    }
    
    /// <remarks/>
    public void GetUserDataAsync(string OTP2, string secretCode, object userState) {
        if ((this.GetUserDataOperationCompleted == null)) {
            this.GetUserDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserDataOperationCompleted);
        }
        this.InvokeAsync("GetUserData", new object[] {
                    OTP2,
                    secretCode}, this.GetUserDataOperationCompleted, userState);
    }
    
    private void OnGetUserDataOperationCompleted(object arg) {
        if ((this.GetUserDataCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetUserDataCompleted(this, new GetUserDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://gamania.com/webservices/")]
public partial class WSResult {
    
    private int resultCodeField;
    
    private string resultDescField;
    
    /// <remarks/>
    public int ResultCode {
        get {
            return this.resultCodeField;
        }
        set {
            this.resultCodeField = value;
        }
    }
    
    /// <remarks/>
    public string ResultDesc {
        get {
            return this.resultDescField;
        }
        set {
            this.resultDescField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://gamania.com/webservices/")]
public partial class WSResult_UserData {
    
    private int resultCodeField;
    
    private string resultDescField;
    
    private string mainAccountIDField;
    
    private int serverIndexField;
    
    private int mainAccountSNField;
    
    private string serviceAccountIDField;
    
    private string gashVersionField;
    
    private string authTypeField;
    
    private string mainAccountTypeField;
    
    private string regionField;
    
    private int serviceAccountSNField;
    
    private string serviceAccountDisplayNameField;
    
    /// <remarks/>
    public int ResultCode {
        get {
            return this.resultCodeField;
        }
        set {
            this.resultCodeField = value;
        }
    }
    
    /// <remarks/>
    public string ResultDesc {
        get {
            return this.resultDescField;
        }
        set {
            this.resultDescField = value;
        }
    }
    
    /// <remarks/>
    public string MainAccountID {
        get {
            return this.mainAccountIDField;
        }
        set {
            this.mainAccountIDField = value;
        }
    }
    
    /// <remarks/>
    public int ServerIndex {
        get {
            return this.serverIndexField;
        }
        set {
            this.serverIndexField = value;
        }
    }
    
    /// <remarks/>
    public int MainAccountSN {
        get {
            return this.mainAccountSNField;
        }
        set {
            this.mainAccountSNField = value;
        }
    }
    
    /// <remarks/>
    public string ServiceAccountID {
        get {
            return this.serviceAccountIDField;
        }
        set {
            this.serviceAccountIDField = value;
        }
    }
    
    /// <remarks/>
    public string GashVersion {
        get {
            return this.gashVersionField;
        }
        set {
            this.gashVersionField = value;
        }
    }
    
    /// <remarks/>
    public string AuthType {
        get {
            return this.authTypeField;
        }
        set {
            this.authTypeField = value;
        }
    }
    
    /// <remarks/>
    public string MainAccountType {
        get {
            return this.mainAccountTypeField;
        }
        set {
            this.mainAccountTypeField = value;
        }
    }
    
    /// <remarks/>
    public string Region {
        get {
            return this.regionField;
        }
        set {
            this.regionField = value;
        }
    }
    
    /// <remarks/>
    public int ServiceAccountSN {
        get {
            return this.serviceAccountSNField;
        }
        set {
            this.serviceAccountSNField = value;
        }
    }
    
    /// <remarks/>
    public string ServiceAccountDisplayName {
        get {
            return this.serviceAccountDisplayNameField;
        }
        set {
            this.serviceAccountDisplayNameField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public delegate void CreateOTPCompletedEventHandler(object sender, CreateOTPCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CreateOTPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CreateOTPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public WSResult Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((WSResult)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public delegate void CreateOTPForMergeListCompletedEventHandler(object sender, CreateOTPForMergeListCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CreateOTPForMergeListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CreateOTPForMergeListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public WSResult Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((WSResult)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public delegate void CreateSecretCodeCompletedEventHandler(object sender, CreateSecretCodeCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CreateSecretCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CreateSecretCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public WSResult Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((WSResult)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public delegate void GetUserDataCompletedEventHandler(object sender, GetUserDataCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetUserDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetUserDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public WSResult_UserData Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((WSResult_UserData)(this.results[0]));
        }
    }
}
