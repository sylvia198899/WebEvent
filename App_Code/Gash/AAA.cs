//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;


    // 
    // This source code was auto-generated by wsdl, Version=2.0.50727.42.
    // 


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "AAASoap", Namespace = "http://GASHv30FWS/AAA/")]
    public partial class AAA : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback ServiceAccount_AuthenticationOperationCompleted;

        private System.Threading.SendOrPostCallback ServiceAccount_AuthorizationOperationCompleted;

        private System.Threading.SendOrPostCallback ServiceAccount_AuthorizationFreePointOperationCompleted;

        private System.Threading.SendOrPostCallback ServiceAccount_AccountingOperationCompleted;

        private System.Threading.SendOrPostCallback ServiceAccount_AccountingFreePointOperationCompleted;

        private System.Threading.SendOrPostCallback MainAccount_AccountingFreePointOperationCompleted;

        /// <remarks/>
        public AAA()
        {
            this.Url = "https://tw.gashws.gamania.com/GASHv30FWS/AAA.asmx";
        }

        /// <remarks/>
        public event ServiceAccount_AuthenticationCompletedEventHandler ServiceAccount_AuthenticationCompleted;

        /// <remarks/>
        public event ServiceAccount_AuthorizationCompletedEventHandler ServiceAccount_AuthorizationCompleted;

        /// <remarks/>
        public event ServiceAccount_AuthorizationFreePointCompletedEventHandler ServiceAccount_AuthorizationFreePointCompleted;

        /// <remarks/>
        public event ServiceAccount_AccountingCompletedEventHandler ServiceAccount_AccountingCompleted;

        /// <remarks/>
        public event ServiceAccount_AccountingFreePointCompletedEventHandler ServiceAccount_AccountingFreePointCompleted;

        /// <remarks/>
        public event MainAccount_AccountingFreePointCompletedEventHandler MainAccount_AccountingFreePointCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://GASHv30FWS/AAA/ServiceAccount_Authentication", RequestNamespace = "http://GASHv30FWS/AAA/", ResponseNamespace = "http://GASHv30FWS/AAA/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ServiceAccount_Authentication(string _strServiceCode, string _strServiceRegion, string _strServiceAccountID, string _strServiceAccountPassword)
        {
            object[] results = this.Invoke("ServiceAccount_Authentication", new object[] {
                    _strServiceCode,
                    _strServiceRegion,
                    _strServiceAccountID,
                    _strServiceAccountPassword});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginServiceAccount_Authentication(string _strServiceCode, string _strServiceRegion, string _strServiceAccountID, string _strServiceAccountPassword, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ServiceAccount_Authentication", new object[] {
                    _strServiceCode,
                    _strServiceRegion,
                    _strServiceAccountID,
                    _strServiceAccountPassword}, callback, asyncState);
        }

        /// <remarks/>
        public string EndServiceAccount_Authentication(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ServiceAccount_AuthenticationAsync(string _strServiceCode, string _strServiceRegion, string _strServiceAccountID, string _strServiceAccountPassword)
        {
            this.ServiceAccount_AuthenticationAsync(_strServiceCode, _strServiceRegion, _strServiceAccountID, _strServiceAccountPassword, null);
        }

        /// <remarks/>
        public void ServiceAccount_AuthenticationAsync(string _strServiceCode, string _strServiceRegion, string _strServiceAccountID, string _strServiceAccountPassword, object userState)
        {
            if ((this.ServiceAccount_AuthenticationOperationCompleted == null))
            {
                this.ServiceAccount_AuthenticationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnServiceAccount_AuthenticationOperationCompleted);
            }
            this.InvokeAsync("ServiceAccount_Authentication", new object[] {
                    _strServiceCode,
                    _strServiceRegion,
                    _strServiceAccountID,
                    _strServiceAccountPassword}, this.ServiceAccount_AuthenticationOperationCompleted, userState);
        }

        private void OnServiceAccount_AuthenticationOperationCompleted(object arg)
        {
            if ((this.ServiceAccount_AuthenticationCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ServiceAccount_AuthenticationCompleted(this, new ServiceAccount_AuthenticationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://GASHv30FWS/AAA/ServiceAccount_Authorization", RequestNamespace = "http://GASHv30FWS/AAA/", ResponseNamespace = "http://GASHv30FWS/AAA/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ServiceAccount_Authorization(string _strServiceCode, string _strServiceRegion, string _strServiceAccountID)
        {
            object[] results = this.Invoke("ServiceAccount_Authorization", new object[] {
                    _strServiceCode,
                    _strServiceRegion,
                    _strServiceAccountID});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginServiceAccount_Authorization(string _strServiceCode, string _strServiceRegion, string _strServiceAccountID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ServiceAccount_Authorization", new object[] {
                    _strServiceCode,
                    _strServiceRegion,
                    _strServiceAccountID}, callback, asyncState);
        }

        /// <remarks/>
        public string EndServiceAccount_Authorization(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ServiceAccount_AuthorizationAsync(string _strServiceCode, string _strServiceRegion, string _strServiceAccountID)
        {
            this.ServiceAccount_AuthorizationAsync(_strServiceCode, _strServiceRegion, _strServiceAccountID, null);
        }

        /// <remarks/>
        public void ServiceAccount_AuthorizationAsync(string _strServiceCode, string _strServiceRegion, string _strServiceAccountID, object userState)
        {
            if ((this.ServiceAccount_AuthorizationOperationCompleted == null))
            {
                this.ServiceAccount_AuthorizationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnServiceAccount_AuthorizationOperationCompleted);
            }
            this.InvokeAsync("ServiceAccount_Authorization", new object[] {
                    _strServiceCode,
                    _strServiceRegion,
                    _strServiceAccountID}, this.ServiceAccount_AuthorizationOperationCompleted, userState);
        }

        private void OnServiceAccount_AuthorizationOperationCompleted(object arg)
        {
            if ((this.ServiceAccount_AuthorizationCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ServiceAccount_AuthorizationCompleted(this, new ServiceAccount_AuthorizationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://GASHv30FWS/AAA/ServiceAccount_AuthorizationFreePoint", RequestNamespace = "http://GASHv30FWS/AAA/", ResponseNamespace = "http://GASHv30FWS/AAA/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ServiceAccount_AuthorizationFreePoint(string _strServiceCode, string _strServiceRegion, string _strServiceAccountID, int _intPoint)
        {
            object[] results = this.Invoke("ServiceAccount_AuthorizationFreePoint", new object[] {
                    _strServiceCode,
                    _strServiceRegion,
                    _strServiceAccountID,
                    _intPoint});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginServiceAccount_AuthorizationFreePoint(string _strServiceCode, string _strServiceRegion, string _strServiceAccountID, int _intPoint, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ServiceAccount_AuthorizationFreePoint", new object[] {
                    _strServiceCode,
                    _strServiceRegion,
                    _strServiceAccountID,
                    _intPoint}, callback, asyncState);
        }

        /// <remarks/>
        public string EndServiceAccount_AuthorizationFreePoint(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ServiceAccount_AuthorizationFreePointAsync(string _strServiceCode, string _strServiceRegion, string _strServiceAccountID, int _intPoint)
        {
            this.ServiceAccount_AuthorizationFreePointAsync(_strServiceCode, _strServiceRegion, _strServiceAccountID, _intPoint, null);
        }

        /// <remarks/>
        public void ServiceAccount_AuthorizationFreePointAsync(string _strServiceCode, string _strServiceRegion, string _strServiceAccountID, int _intPoint, object userState)
        {
            if ((this.ServiceAccount_AuthorizationFreePointOperationCompleted == null))
            {
                this.ServiceAccount_AuthorizationFreePointOperationCompleted = new System.Threading.SendOrPostCallback(this.OnServiceAccount_AuthorizationFreePointOperationCompleted);
            }
            this.InvokeAsync("ServiceAccount_AuthorizationFreePoint", new object[] {
                    _strServiceCode,
                    _strServiceRegion,
                    _strServiceAccountID,
                    _intPoint}, this.ServiceAccount_AuthorizationFreePointOperationCompleted, userState);
        }

        private void OnServiceAccount_AuthorizationFreePointOperationCompleted(object arg)
        {
            if ((this.ServiceAccount_AuthorizationFreePointCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ServiceAccount_AuthorizationFreePointCompleted(this, new ServiceAccount_AuthorizationFreePointCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://GASHv30FWS/AAA/ServiceAccount_Accounting", RequestNamespace = "http://GASHv30FWS/AAA/", ResponseNamespace = "http://GASHv30FWS/AAA/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ServiceAccount_Accounting(string _strServiceCode, string _strServiceRegion, string _strServiceAccountID, string _strLoginTime, string _strLogoutTime, string _strMemo, string _strIPAddress)
        {
            object[] results = this.Invoke("ServiceAccount_Accounting", new object[] {
                    _strServiceCode,
                    _strServiceRegion,
                    _strServiceAccountID,
                    _strLoginTime,
                    _strLogoutTime,
                    _strMemo,
                    _strIPAddress});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginServiceAccount_Accounting(string _strServiceCode, string _strServiceRegion, string _strServiceAccountID, string _strLoginTime, string _strLogoutTime, string _strMemo, string _strIPAddress, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ServiceAccount_Accounting", new object[] {
                    _strServiceCode,
                    _strServiceRegion,
                    _strServiceAccountID,
                    _strLoginTime,
                    _strLogoutTime,
                    _strMemo,
                    _strIPAddress}, callback, asyncState);
        }

        /// <remarks/>
        public string EndServiceAccount_Accounting(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ServiceAccount_AccountingAsync(string _strServiceCode, string _strServiceRegion, string _strServiceAccountID, string _strLoginTime, string _strLogoutTime, string _strMemo, string _strIPAddress)
        {
            this.ServiceAccount_AccountingAsync(_strServiceCode, _strServiceRegion, _strServiceAccountID, _strLoginTime, _strLogoutTime, _strMemo, _strIPAddress, null);
        }

        /// <remarks/>
        public void ServiceAccount_AccountingAsync(string _strServiceCode, string _strServiceRegion, string _strServiceAccountID, string _strLoginTime, string _strLogoutTime, string _strMemo, string _strIPAddress, object userState)
        {
            if ((this.ServiceAccount_AccountingOperationCompleted == null))
            {
                this.ServiceAccount_AccountingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnServiceAccount_AccountingOperationCompleted);
            }
            this.InvokeAsync("ServiceAccount_Accounting", new object[] {
                    _strServiceCode,
                    _strServiceRegion,
                    _strServiceAccountID,
                    _strLoginTime,
                    _strLogoutTime,
                    _strMemo,
                    _strIPAddress}, this.ServiceAccount_AccountingOperationCompleted, userState);
        }

        private void OnServiceAccount_AccountingOperationCompleted(object arg)
        {
            if ((this.ServiceAccount_AccountingCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ServiceAccount_AccountingCompleted(this, new ServiceAccount_AccountingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://GASHv30FWS/AAA/ServiceAccount_AccountingFreePoint", RequestNamespace = "http://GASHv30FWS/AAA/", ResponseNamespace = "http://GASHv30FWS/AAA/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ServiceAccount_AccountingFreePoint(string _strServiceCode, string _strServiceRegion, string _strServiceAccountID, string _strTime, int _intPoint, string _strMemo, string _strIPAddress)
        {
            object[] results = this.Invoke("ServiceAccount_AccountingFreePoint", new object[] {
                    _strServiceCode,
                    _strServiceRegion,
                    _strServiceAccountID,
                    _strTime,
                    _intPoint,
                    _strMemo,
                    _strIPAddress});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginServiceAccount_AccountingFreePoint(string _strServiceCode, string _strServiceRegion, string _strServiceAccountID, string _strTime, int _intPoint, string _strMemo, string _strIPAddress, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ServiceAccount_AccountingFreePoint", new object[] {
                    _strServiceCode,
                    _strServiceRegion,
                    _strServiceAccountID,
                    _strTime,
                    _intPoint,
                    _strMemo,
                    _strIPAddress}, callback, asyncState);
        }

        /// <remarks/>
        public string EndServiceAccount_AccountingFreePoint(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ServiceAccount_AccountingFreePointAsync(string _strServiceCode, string _strServiceRegion, string _strServiceAccountID, string _strTime, int _intPoint, string _strMemo, string _strIPAddress)
        {
            this.ServiceAccount_AccountingFreePointAsync(_strServiceCode, _strServiceRegion, _strServiceAccountID, _strTime, _intPoint, _strMemo, _strIPAddress, null);
        }

        /// <remarks/>
        public void ServiceAccount_AccountingFreePointAsync(string _strServiceCode, string _strServiceRegion, string _strServiceAccountID, string _strTime, int _intPoint, string _strMemo, string _strIPAddress, object userState)
        {
            if ((this.ServiceAccount_AccountingFreePointOperationCompleted == null))
            {
                this.ServiceAccount_AccountingFreePointOperationCompleted = new System.Threading.SendOrPostCallback(this.OnServiceAccount_AccountingFreePointOperationCompleted);
            }
            this.InvokeAsync("ServiceAccount_AccountingFreePoint", new object[] {
                    _strServiceCode,
                    _strServiceRegion,
                    _strServiceAccountID,
                    _strTime,
                    _intPoint,
                    _strMemo,
                    _strIPAddress}, this.ServiceAccount_AccountingFreePointOperationCompleted, userState);
        }

        private void OnServiceAccount_AccountingFreePointOperationCompleted(object arg)
        {
            if ((this.ServiceAccount_AccountingFreePointCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ServiceAccount_AccountingFreePointCompleted(this, new ServiceAccount_AccountingFreePointCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://GASHv30FWS/AAA/MainAccount_AccountingFreePoint", RequestNamespace = "http://GASHv30FWS/AAA/", ResponseNamespace = "http://GASHv30FWS/AAA/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MainAccount_AccountingFreePoint(string _strMainAccountID, string _strServiceCode, string _strServiceRegion, string _strTime, int _intPoint, string _strMemo, string _strIPAddress)
        {
            object[] results = this.Invoke("MainAccount_AccountingFreePoint", new object[] {
                    _strMainAccountID,
                    _strServiceCode,
                    _strServiceRegion,
                    _strTime,
                    _intPoint,
                    _strMemo,
                    _strIPAddress});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginMainAccount_AccountingFreePoint(string _strMainAccountID, string _strServiceCode, string _strServiceRegion, string _strTime, int _intPoint, string _strMemo, string _strIPAddress, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("MainAccount_AccountingFreePoint", new object[] {
                    _strMainAccountID,
                    _strServiceCode,
                    _strServiceRegion,
                    _strTime,
                    _intPoint,
                    _strMemo,
                    _strIPAddress}, callback, asyncState);
        }

        /// <remarks/>
        public string EndMainAccount_AccountingFreePoint(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void MainAccount_AccountingFreePointAsync(string _strMainAccountID, string _strServiceCode, string _strServiceRegion, string _strTime, int _intPoint, string _strMemo, string _strIPAddress)
        {
            this.MainAccount_AccountingFreePointAsync(_strMainAccountID, _strServiceCode, _strServiceRegion, _strTime, _intPoint, _strMemo, _strIPAddress, null);
        }

        /// <remarks/>
        public void MainAccount_AccountingFreePointAsync(string _strMainAccountID, string _strServiceCode, string _strServiceRegion, string _strTime, int _intPoint, string _strMemo, string _strIPAddress, object userState)
        {
            if ((this.MainAccount_AccountingFreePointOperationCompleted == null))
            {
                this.MainAccount_AccountingFreePointOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMainAccount_AccountingFreePointOperationCompleted);
            }
            this.InvokeAsync("MainAccount_AccountingFreePoint", new object[] {
                    _strMainAccountID,
                    _strServiceCode,
                    _strServiceRegion,
                    _strTime,
                    _intPoint,
                    _strMemo,
                    _strIPAddress}, this.MainAccount_AccountingFreePointOperationCompleted, userState);
        }

        private void OnMainAccount_AccountingFreePointOperationCompleted(object arg)
        {
            if ((this.MainAccount_AccountingFreePointCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MainAccount_AccountingFreePointCompleted(this, new MainAccount_AccountingFreePointCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ServiceAccount_AuthenticationCompletedEventHandler(object sender, ServiceAccount_AuthenticationCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ServiceAccount_AuthenticationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ServiceAccount_AuthenticationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ServiceAccount_AuthorizationCompletedEventHandler(object sender, ServiceAccount_AuthorizationCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ServiceAccount_AuthorizationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ServiceAccount_AuthorizationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ServiceAccount_AuthorizationFreePointCompletedEventHandler(object sender, ServiceAccount_AuthorizationFreePointCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ServiceAccount_AuthorizationFreePointCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ServiceAccount_AuthorizationFreePointCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ServiceAccount_AccountingCompletedEventHandler(object sender, ServiceAccount_AccountingCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ServiceAccount_AccountingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ServiceAccount_AccountingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ServiceAccount_AccountingFreePointCompletedEventHandler(object sender, ServiceAccount_AccountingFreePointCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ServiceAccount_AccountingFreePointCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ServiceAccount_AccountingFreePointCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void MainAccount_AccountingFreePointCompletedEventHandler(object sender, MainAccount_AccountingFreePointCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MainAccount_AccountingFreePointCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal MainAccount_AccountingFreePointCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
