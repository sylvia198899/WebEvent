//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:2.0.50727.3603
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// 此原始程式碼由 wsdl 版本=2.0.50727.1432 自動產生。
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="ServiceAccountSoap", Namespace="http://GASHv30FWS/ServiceAccount/")]
public partial class ServiceAccount : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback ServiceAccount_CreateOperationCompleted;
    
    private System.Threading.SendOrPostCallback ServiceAccount_CreateSimpleOperationCompleted;
    
    private System.Threading.SendOrPostCallback ServiceAccount_GetMainAccountIDOperationCompleted;
    
    private System.Threading.SendOrPostCallback ServiceAccount_GetRemainingPointsOperationCompleted;
    
    private System.Threading.SendOrPostCallback ServiceAccount_GetET_CROperationCompleted;
    
    private System.Threading.SendOrPostCallback ServiceAccount_GetUsedPointsForCTIOperationCompleted;
    
    private System.Threading.SendOrPostCallback ServiceAccount_GiveMinutesOperationCompleted;
    
    private System.Threading.SendOrPostCallback ServiceAccount_ChangeAuthTypeOperationCompleted;
    
    private System.Threading.SendOrPostCallback ServiceAccount_CheckUpgradeOperationCompleted;
    
    /// <remarks/>
    public ServiceAccount() {
        this.Url = "http://tw.gashws.gamania.com/GASHv30FWS/ServiceAccount.asmx";
    }
    
    /// <remarks/>
    public event ServiceAccount_CreateCompletedEventHandler ServiceAccount_CreateCompleted;
    
    /// <remarks/>
    public event ServiceAccount_CreateSimpleCompletedEventHandler ServiceAccount_CreateSimpleCompleted;
    
    /// <remarks/>
    public event ServiceAccount_GetMainAccountIDCompletedEventHandler ServiceAccount_GetMainAccountIDCompleted;
    
    /// <remarks/>
    public event ServiceAccount_GetRemainingPointsCompletedEventHandler ServiceAccount_GetRemainingPointsCompleted;
    
    /// <remarks/>
    public event ServiceAccount_GetET_CRCompletedEventHandler ServiceAccount_GetET_CRCompleted;
    
    /// <remarks/>
    public event ServiceAccount_GetUsedPointsForCTICompletedEventHandler ServiceAccount_GetUsedPointsForCTICompleted;
    
    /// <remarks/>
    public event ServiceAccount_GiveMinutesCompletedEventHandler ServiceAccount_GiveMinutesCompleted;
    
    /// <remarks/>
    public event ServiceAccount_ChangeAuthTypeCompletedEventHandler ServiceAccount_ChangeAuthTypeCompleted;
    
    /// <remarks/>
    public event ServiceAccount_CheckUpgradeCompletedEventHandler ServiceAccount_CheckUpgradeCompleted;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://GASHv30FWS/ServiceAccount/ServiceAccount_Create", RequestNamespace="http://GASHv30FWS/ServiceAccount/", ResponseNamespace="http://GASHv30FWS/ServiceAccount/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string ServiceAccount_Create(string _strMainAccountID, string _strServiceCode, string _strServiceRegion, string _strServiceAccountID, string _strServiceAccountPassword, string _strType, string _strPersonalID, string _strCreator) {
        object[] results = this.Invoke("ServiceAccount_Create", new object[] {
                    _strMainAccountID,
                    _strServiceCode,
                    _strServiceRegion,
                    _strServiceAccountID,
                    _strServiceAccountPassword,
                    _strType,
                    _strPersonalID,
                    _strCreator});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginServiceAccount_Create(string _strMainAccountID, string _strServiceCode, string _strServiceRegion, string _strServiceAccountID, string _strServiceAccountPassword, string _strType, string _strPersonalID, string _strCreator, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ServiceAccount_Create", new object[] {
                    _strMainAccountID,
                    _strServiceCode,
                    _strServiceRegion,
                    _strServiceAccountID,
                    _strServiceAccountPassword,
                    _strType,
                    _strPersonalID,
                    _strCreator}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndServiceAccount_Create(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void ServiceAccount_CreateAsync(string _strMainAccountID, string _strServiceCode, string _strServiceRegion, string _strServiceAccountID, string _strServiceAccountPassword, string _strType, string _strPersonalID, string _strCreator) {
        this.ServiceAccount_CreateAsync(_strMainAccountID, _strServiceCode, _strServiceRegion, _strServiceAccountID, _strServiceAccountPassword, _strType, _strPersonalID, _strCreator, null);
    }
    
    /// <remarks/>
    public void ServiceAccount_CreateAsync(string _strMainAccountID, string _strServiceCode, string _strServiceRegion, string _strServiceAccountID, string _strServiceAccountPassword, string _strType, string _strPersonalID, string _strCreator, object userState) {
        if ((this.ServiceAccount_CreateOperationCompleted == null)) {
            this.ServiceAccount_CreateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnServiceAccount_CreateOperationCompleted);
        }
        this.InvokeAsync("ServiceAccount_Create", new object[] {
                    _strMainAccountID,
                    _strServiceCode,
                    _strServiceRegion,
                    _strServiceAccountID,
                    _strServiceAccountPassword,
                    _strType,
                    _strPersonalID,
                    _strCreator}, this.ServiceAccount_CreateOperationCompleted, userState);
    }
    
    private void OnServiceAccount_CreateOperationCompleted(object arg) {
        if ((this.ServiceAccount_CreateCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ServiceAccount_CreateCompleted(this, new ServiceAccount_CreateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://GASHv30FWS/ServiceAccount/ServiceAccount_CreateSimple", RequestNamespace="http://GASHv30FWS/ServiceAccount/", ResponseNamespace="http://GASHv30FWS/ServiceAccount/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string ServiceAccount_CreateSimple(string _strMainAccountID, string _strServiceCode, string _strServiceRegion, string _strServiceAccountID) {
        object[] results = this.Invoke("ServiceAccount_CreateSimple", new object[] {
                    _strMainAccountID,
                    _strServiceCode,
                    _strServiceRegion,
                    _strServiceAccountID});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginServiceAccount_CreateSimple(string _strMainAccountID, string _strServiceCode, string _strServiceRegion, string _strServiceAccountID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ServiceAccount_CreateSimple", new object[] {
                    _strMainAccountID,
                    _strServiceCode,
                    _strServiceRegion,
                    _strServiceAccountID}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndServiceAccount_CreateSimple(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void ServiceAccount_CreateSimpleAsync(string _strMainAccountID, string _strServiceCode, string _strServiceRegion, string _strServiceAccountID) {
        this.ServiceAccount_CreateSimpleAsync(_strMainAccountID, _strServiceCode, _strServiceRegion, _strServiceAccountID, null);
    }
    
    /// <remarks/>
    public void ServiceAccount_CreateSimpleAsync(string _strMainAccountID, string _strServiceCode, string _strServiceRegion, string _strServiceAccountID, object userState) {
        if ((this.ServiceAccount_CreateSimpleOperationCompleted == null)) {
            this.ServiceAccount_CreateSimpleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnServiceAccount_CreateSimpleOperationCompleted);
        }
        this.InvokeAsync("ServiceAccount_CreateSimple", new object[] {
                    _strMainAccountID,
                    _strServiceCode,
                    _strServiceRegion,
                    _strServiceAccountID}, this.ServiceAccount_CreateSimpleOperationCompleted, userState);
    }
    
    private void OnServiceAccount_CreateSimpleOperationCompleted(object arg) {
        if ((this.ServiceAccount_CreateSimpleCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ServiceAccount_CreateSimpleCompleted(this, new ServiceAccount_CreateSimpleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://GASHv30FWS/ServiceAccount/ServiceAccount_GetMainAccountID", RequestNamespace="http://GASHv30FWS/ServiceAccount/", ResponseNamespace="http://GASHv30FWS/ServiceAccount/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string ServiceAccount_GetMainAccountID(string _strServiceCode, string _strServiceRegion, string _strServiceAccountID) {
        object[] results = this.Invoke("ServiceAccount_GetMainAccountID", new object[] {
                    _strServiceCode,
                    _strServiceRegion,
                    _strServiceAccountID});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginServiceAccount_GetMainAccountID(string _strServiceCode, string _strServiceRegion, string _strServiceAccountID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ServiceAccount_GetMainAccountID", new object[] {
                    _strServiceCode,
                    _strServiceRegion,
                    _strServiceAccountID}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndServiceAccount_GetMainAccountID(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void ServiceAccount_GetMainAccountIDAsync(string _strServiceCode, string _strServiceRegion, string _strServiceAccountID) {
        this.ServiceAccount_GetMainAccountIDAsync(_strServiceCode, _strServiceRegion, _strServiceAccountID, null);
    }
    
    /// <remarks/>
    public void ServiceAccount_GetMainAccountIDAsync(string _strServiceCode, string _strServiceRegion, string _strServiceAccountID, object userState) {
        if ((this.ServiceAccount_GetMainAccountIDOperationCompleted == null)) {
            this.ServiceAccount_GetMainAccountIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnServiceAccount_GetMainAccountIDOperationCompleted);
        }
        this.InvokeAsync("ServiceAccount_GetMainAccountID", new object[] {
                    _strServiceCode,
                    _strServiceRegion,
                    _strServiceAccountID}, this.ServiceAccount_GetMainAccountIDOperationCompleted, userState);
    }
    
    private void OnServiceAccount_GetMainAccountIDOperationCompleted(object arg) {
        if ((this.ServiceAccount_GetMainAccountIDCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ServiceAccount_GetMainAccountIDCompleted(this, new ServiceAccount_GetMainAccountIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://GASHv30FWS/ServiceAccount/ServiceAccount_GetRemainingPoints", RequestNamespace="http://GASHv30FWS/ServiceAccount/", ResponseNamespace="http://GASHv30FWS/ServiceAccount/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string ServiceAccount_GetRemainingPoints(string _strServiceCode, string _strServiceRegion, string _strServiceAccountID) {
        object[] results = this.Invoke("ServiceAccount_GetRemainingPoints", new object[] {
                    _strServiceCode,
                    _strServiceRegion,
                    _strServiceAccountID});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginServiceAccount_GetRemainingPoints(string _strServiceCode, string _strServiceRegion, string _strServiceAccountID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ServiceAccount_GetRemainingPoints", new object[] {
                    _strServiceCode,
                    _strServiceRegion,
                    _strServiceAccountID}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndServiceAccount_GetRemainingPoints(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void ServiceAccount_GetRemainingPointsAsync(string _strServiceCode, string _strServiceRegion, string _strServiceAccountID) {
        this.ServiceAccount_GetRemainingPointsAsync(_strServiceCode, _strServiceRegion, _strServiceAccountID, null);
    }
    
    /// <remarks/>
    public void ServiceAccount_GetRemainingPointsAsync(string _strServiceCode, string _strServiceRegion, string _strServiceAccountID, object userState) {
        if ((this.ServiceAccount_GetRemainingPointsOperationCompleted == null)) {
            this.ServiceAccount_GetRemainingPointsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnServiceAccount_GetRemainingPointsOperationCompleted);
        }
        this.InvokeAsync("ServiceAccount_GetRemainingPoints", new object[] {
                    _strServiceCode,
                    _strServiceRegion,
                    _strServiceAccountID}, this.ServiceAccount_GetRemainingPointsOperationCompleted, userState);
    }
    
    private void OnServiceAccount_GetRemainingPointsOperationCompleted(object arg) {
        if ((this.ServiceAccount_GetRemainingPointsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ServiceAccount_GetRemainingPointsCompleted(this, new ServiceAccount_GetRemainingPointsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://GASHv30FWS/ServiceAccount/ServiceAccount_GetET_CR", RequestNamespace="http://GASHv30FWS/ServiceAccount/", ResponseNamespace="http://GASHv30FWS/ServiceAccount/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string ServiceAccount_GetET_CR(string _strServiceCode, string _strServiceRegion, string _strServiceAccountID) {
        object[] results = this.Invoke("ServiceAccount_GetET_CR", new object[] {
                    _strServiceCode,
                    _strServiceRegion,
                    _strServiceAccountID});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginServiceAccount_GetET_CR(string _strServiceCode, string _strServiceRegion, string _strServiceAccountID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ServiceAccount_GetET_CR", new object[] {
                    _strServiceCode,
                    _strServiceRegion,
                    _strServiceAccountID}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndServiceAccount_GetET_CR(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void ServiceAccount_GetET_CRAsync(string _strServiceCode, string _strServiceRegion, string _strServiceAccountID) {
        this.ServiceAccount_GetET_CRAsync(_strServiceCode, _strServiceRegion, _strServiceAccountID, null);
    }
    
    /// <remarks/>
    public void ServiceAccount_GetET_CRAsync(string _strServiceCode, string _strServiceRegion, string _strServiceAccountID, object userState) {
        if ((this.ServiceAccount_GetET_CROperationCompleted == null)) {
            this.ServiceAccount_GetET_CROperationCompleted = new System.Threading.SendOrPostCallback(this.OnServiceAccount_GetET_CROperationCompleted);
        }
        this.InvokeAsync("ServiceAccount_GetET_CR", new object[] {
                    _strServiceCode,
                    _strServiceRegion,
                    _strServiceAccountID}, this.ServiceAccount_GetET_CROperationCompleted, userState);
    }
    
    private void OnServiceAccount_GetET_CROperationCompleted(object arg) {
        if ((this.ServiceAccount_GetET_CRCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ServiceAccount_GetET_CRCompleted(this, new ServiceAccount_GetET_CRCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://GASHv30FWS/ServiceAccount/ServiceAccount_GetUsedPointsForCTI", RequestNamespace="http://GASHv30FWS/ServiceAccount/", ResponseNamespace="http://GASHv30FWS/ServiceAccount/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public int ServiceAccount_GetUsedPointsForCTI(string _strServiceCode, string _strServiceRegion, string _strServiceAccountID) {
        object[] results = this.Invoke("ServiceAccount_GetUsedPointsForCTI", new object[] {
                    _strServiceCode,
                    _strServiceRegion,
                    _strServiceAccountID});
        return ((int)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginServiceAccount_GetUsedPointsForCTI(string _strServiceCode, string _strServiceRegion, string _strServiceAccountID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ServiceAccount_GetUsedPointsForCTI", new object[] {
                    _strServiceCode,
                    _strServiceRegion,
                    _strServiceAccountID}, callback, asyncState);
    }
    
    /// <remarks/>
    public int EndServiceAccount_GetUsedPointsForCTI(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    /// <remarks/>
    public void ServiceAccount_GetUsedPointsForCTIAsync(string _strServiceCode, string _strServiceRegion, string _strServiceAccountID) {
        this.ServiceAccount_GetUsedPointsForCTIAsync(_strServiceCode, _strServiceRegion, _strServiceAccountID, null);
    }
    
    /// <remarks/>
    public void ServiceAccount_GetUsedPointsForCTIAsync(string _strServiceCode, string _strServiceRegion, string _strServiceAccountID, object userState) {
        if ((this.ServiceAccount_GetUsedPointsForCTIOperationCompleted == null)) {
            this.ServiceAccount_GetUsedPointsForCTIOperationCompleted = new System.Threading.SendOrPostCallback(this.OnServiceAccount_GetUsedPointsForCTIOperationCompleted);
        }
        this.InvokeAsync("ServiceAccount_GetUsedPointsForCTI", new object[] {
                    _strServiceCode,
                    _strServiceRegion,
                    _strServiceAccountID}, this.ServiceAccount_GetUsedPointsForCTIOperationCompleted, userState);
    }
    
    private void OnServiceAccount_GetUsedPointsForCTIOperationCompleted(object arg) {
        if ((this.ServiceAccount_GetUsedPointsForCTICompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ServiceAccount_GetUsedPointsForCTICompleted(this, new ServiceAccount_GetUsedPointsForCTICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://GASHv30FWS/ServiceAccount/ServiceAccount_GiveMinutes", RequestNamespace="http://GASHv30FWS/ServiceAccount/", ResponseNamespace="http://GASHv30FWS/ServiceAccount/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string ServiceAccount_GiveMinutes(string _strServiceCode, string _strServiceRegion, string _strServiceAccountID, int _intMinutes, string _strMemo, string _strIPAddress, string _strCreator) {
        object[] results = this.Invoke("ServiceAccount_GiveMinutes", new object[] {
                    _strServiceCode,
                    _strServiceRegion,
                    _strServiceAccountID,
                    _intMinutes,
                    _strMemo,
                    _strIPAddress,
                    _strCreator});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginServiceAccount_GiveMinutes(string _strServiceCode, string _strServiceRegion, string _strServiceAccountID, int _intMinutes, string _strMemo, string _strIPAddress, string _strCreator, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ServiceAccount_GiveMinutes", new object[] {
                    _strServiceCode,
                    _strServiceRegion,
                    _strServiceAccountID,
                    _intMinutes,
                    _strMemo,
                    _strIPAddress,
                    _strCreator}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndServiceAccount_GiveMinutes(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void ServiceAccount_GiveMinutesAsync(string _strServiceCode, string _strServiceRegion, string _strServiceAccountID, int _intMinutes, string _strMemo, string _strIPAddress, string _strCreator) {
        this.ServiceAccount_GiveMinutesAsync(_strServiceCode, _strServiceRegion, _strServiceAccountID, _intMinutes, _strMemo, _strIPAddress, _strCreator, null);
    }
    
    /// <remarks/>
    public void ServiceAccount_GiveMinutesAsync(string _strServiceCode, string _strServiceRegion, string _strServiceAccountID, int _intMinutes, string _strMemo, string _strIPAddress, string _strCreator, object userState) {
        if ((this.ServiceAccount_GiveMinutesOperationCompleted == null)) {
            this.ServiceAccount_GiveMinutesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnServiceAccount_GiveMinutesOperationCompleted);
        }
        this.InvokeAsync("ServiceAccount_GiveMinutes", new object[] {
                    _strServiceCode,
                    _strServiceRegion,
                    _strServiceAccountID,
                    _intMinutes,
                    _strMemo,
                    _strIPAddress,
                    _strCreator}, this.ServiceAccount_GiveMinutesOperationCompleted, userState);
    }
    
    private void OnServiceAccount_GiveMinutesOperationCompleted(object arg) {
        if ((this.ServiceAccount_GiveMinutesCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ServiceAccount_GiveMinutesCompleted(this, new ServiceAccount_GiveMinutesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://GASHv30FWS/ServiceAccount/ServiceAccount_ChangeAuthType", RequestNamespace="http://GASHv30FWS/ServiceAccount/", ResponseNamespace="http://GASHv30FWS/ServiceAccount/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string ServiceAccount_ChangeAuthType(string _strServiceCode, string _strServiceRegion, string _strServiceAccountID, string _strType, string _strIPAddress, string _strCreator) {
        object[] results = this.Invoke("ServiceAccount_ChangeAuthType", new object[] {
                    _strServiceCode,
                    _strServiceRegion,
                    _strServiceAccountID,
                    _strType,
                    _strIPAddress,
                    _strCreator});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginServiceAccount_ChangeAuthType(string _strServiceCode, string _strServiceRegion, string _strServiceAccountID, string _strType, string _strIPAddress, string _strCreator, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ServiceAccount_ChangeAuthType", new object[] {
                    _strServiceCode,
                    _strServiceRegion,
                    _strServiceAccountID,
                    _strType,
                    _strIPAddress,
                    _strCreator}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndServiceAccount_ChangeAuthType(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void ServiceAccount_ChangeAuthTypeAsync(string _strServiceCode, string _strServiceRegion, string _strServiceAccountID, string _strType, string _strIPAddress, string _strCreator) {
        this.ServiceAccount_ChangeAuthTypeAsync(_strServiceCode, _strServiceRegion, _strServiceAccountID, _strType, _strIPAddress, _strCreator, null);
    }
    
    /// <remarks/>
    public void ServiceAccount_ChangeAuthTypeAsync(string _strServiceCode, string _strServiceRegion, string _strServiceAccountID, string _strType, string _strIPAddress, string _strCreator, object userState) {
        if ((this.ServiceAccount_ChangeAuthTypeOperationCompleted == null)) {
            this.ServiceAccount_ChangeAuthTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnServiceAccount_ChangeAuthTypeOperationCompleted);
        }
        this.InvokeAsync("ServiceAccount_ChangeAuthType", new object[] {
                    _strServiceCode,
                    _strServiceRegion,
                    _strServiceAccountID,
                    _strType,
                    _strIPAddress,
                    _strCreator}, this.ServiceAccount_ChangeAuthTypeOperationCompleted, userState);
    }
    
    private void OnServiceAccount_ChangeAuthTypeOperationCompleted(object arg) {
        if ((this.ServiceAccount_ChangeAuthTypeCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ServiceAccount_ChangeAuthTypeCompleted(this, new ServiceAccount_ChangeAuthTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://GASHv30FWS/ServiceAccount/ServiceAccount_CheckUpgrade", RequestNamespace="http://GASHv30FWS/ServiceAccount/", ResponseNamespace="http://GASHv30FWS/ServiceAccount/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool ServiceAccount_CheckUpgrade(string _strServiceAccountID, string _strServiceCode, string _strServiceRegion) {
        object[] results = this.Invoke("ServiceAccount_CheckUpgrade", new object[] {
                    _strServiceAccountID,
                    _strServiceCode,
                    _strServiceRegion});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginServiceAccount_CheckUpgrade(string _strServiceAccountID, string _strServiceCode, string _strServiceRegion, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ServiceAccount_CheckUpgrade", new object[] {
                    _strServiceAccountID,
                    _strServiceCode,
                    _strServiceRegion}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndServiceAccount_CheckUpgrade(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void ServiceAccount_CheckUpgradeAsync(string _strServiceAccountID, string _strServiceCode, string _strServiceRegion) {
        this.ServiceAccount_CheckUpgradeAsync(_strServiceAccountID, _strServiceCode, _strServiceRegion, null);
    }
    
    /// <remarks/>
    public void ServiceAccount_CheckUpgradeAsync(string _strServiceAccountID, string _strServiceCode, string _strServiceRegion, object userState) {
        if ((this.ServiceAccount_CheckUpgradeOperationCompleted == null)) {
            this.ServiceAccount_CheckUpgradeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnServiceAccount_CheckUpgradeOperationCompleted);
        }
        this.InvokeAsync("ServiceAccount_CheckUpgrade", new object[] {
                    _strServiceAccountID,
                    _strServiceCode,
                    _strServiceRegion}, this.ServiceAccount_CheckUpgradeOperationCompleted, userState);
    }
    
    private void OnServiceAccount_CheckUpgradeOperationCompleted(object arg) {
        if ((this.ServiceAccount_CheckUpgradeCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ServiceAccount_CheckUpgradeCompleted(this, new ServiceAccount_CheckUpgradeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void ServiceAccount_CreateCompletedEventHandler(object sender, ServiceAccount_CreateCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ServiceAccount_CreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ServiceAccount_CreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void ServiceAccount_CreateSimpleCompletedEventHandler(object sender, ServiceAccount_CreateSimpleCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ServiceAccount_CreateSimpleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ServiceAccount_CreateSimpleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void ServiceAccount_GetMainAccountIDCompletedEventHandler(object sender, ServiceAccount_GetMainAccountIDCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ServiceAccount_GetMainAccountIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ServiceAccount_GetMainAccountIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void ServiceAccount_GetRemainingPointsCompletedEventHandler(object sender, ServiceAccount_GetRemainingPointsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ServiceAccount_GetRemainingPointsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ServiceAccount_GetRemainingPointsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void ServiceAccount_GetET_CRCompletedEventHandler(object sender, ServiceAccount_GetET_CRCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ServiceAccount_GetET_CRCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ServiceAccount_GetET_CRCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void ServiceAccount_GetUsedPointsForCTICompletedEventHandler(object sender, ServiceAccount_GetUsedPointsForCTICompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ServiceAccount_GetUsedPointsForCTICompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ServiceAccount_GetUsedPointsForCTICompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void ServiceAccount_GiveMinutesCompletedEventHandler(object sender, ServiceAccount_GiveMinutesCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ServiceAccount_GiveMinutesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ServiceAccount_GiveMinutesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void ServiceAccount_ChangeAuthTypeCompletedEventHandler(object sender, ServiceAccount_ChangeAuthTypeCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ServiceAccount_ChangeAuthTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ServiceAccount_ChangeAuthTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void ServiceAccount_CheckUpgradeCompletedEventHandler(object sender, ServiceAccount_CheckUpgradeCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ServiceAccount_CheckUpgradeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ServiceAccount_CheckUpgradeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}
